{"version":3,"sources":["assets/images/covid.png","components/about.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","Fragment","className","Styles","styled","div","NavigationBar","Navbar","expand","Toggle","aria-controls","Collapse","id","Nav","Item","Link","href","path","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,mC,kPCE9BC,G,MAAQ,kBACnB,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,SACb,wBAAIA,UAAU,YAAd,qBACA,mFACsD,IACpD,mDAFF,kXASA,wBAAIA,UAAU,YAAd,yBACA,uFAEE,4BACE,gEACA,+EACA,yHAIA,8KAOJ,wBAAIA,UAAU,YAAd,mCACA,sGAEE,4BACE,sFACA,mFACA,wFACA,2EAGJ,wBAAIA,UAAU,YAAd,YACA,6BACE,4BACE,+CACA,qCACA,2EACA,uCACA,oDACA,wCACA,0DACA,2CACA,wDACA,kDACA,0CAGJ,wBAAIA,UAAU,YACZ,uDAEF,6BACE,4BACE,iDACA,wEACA,6CACA,+DACA,yD,ybC9DV,IAAMC,EAASC,IAAOC,IAAV,KAyBCC,EAAgB,kBAC3B,kBAAC,IAAD,KACE,kBAACH,EAAD,KACE,kBAACI,EAAA,EAAD,CAAQC,OAAO,MACb,kBAACD,EAAA,EAAOE,OAAR,CAAeC,gBAAc,qBAE7B,kBAACH,EAAA,EAAOI,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKX,UAAU,WACb,kBAACW,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,KAAf,SAEF,kBAACH,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,UAAf,iBAEF,kBAACH,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,YAAf,YAEF,kBAACH,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,SAAf,wBAMV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,U,iBCxBOC,MAxBf,WACE,OACE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKiB,IAAKC,IAAMlB,UAAU,WAAWmB,IAAI,UAW3C,kBAAC,IAAMpB,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,UCbUqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.938a68aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid.ad717c3e.png\";","import React from \"react\";\nimport \"./about.css\";\nexport const About = () => (\n  <React.Fragment>\n    <div className=\"About\">\n      <h1 className=\"h1-title\">What is COVID-19?</h1>\n      <div>\n        COVID-19 is a type of coronavirus that is causing a{\" \"}\n        <strong>global pandemic</strong>. The reason behind why we do not have a\n        cure is because COVID-19 is a novel coronavirus, this means that we\n        humans have never seen this type of coronavirus before on Planet Earth.\n        COVID-19 is affecting many people at a alarmingly fast rate. It can be\n        spread from person to person so you must take neccesary precautions and\n        follow certain guidelines as listed below.\n      </div>\n      <h2 className=\"h2-title\">Neccesary Precautions</h2>\n      <div>\n        Some of the neccesary precautions you should follow are\n        <ul>\n          <li>Wearing a mask outside the house</li>\n          <li>Following social distancing(6 feet or 2 meters)</li>\n          <li>\n            Disinfecting frequently touched surfaces such as keyboards,\n            smartphones, countertops, etc\n          </li>\n          <li>\n            Wash your hands often with soap and water for at least 20 seconds,\n            or use an alcohol-based hand sanitizer that contains at least 60%\n            alcohol\n          </li>\n        </ul>\n      </div>\n      <h2 className=\"h2-title\">What to do if you have COVID-19</h2>\n      <div>\n        If you or someone you know has COVID-19 follow these steps accordingly\n        <ol>\n          <li>Stay home if you are sick, except to get medical care.</li>\n          <li>Avoid public transportation, ride-sharing, or taxis</li>\n          <li>Isolate yourself from other people and pets in your home</li>\n          <li>If you need medical attention, call ahead</li>\n        </ol>\n      </div>\n      <h2 className=\"h2-title\">Symptoms</h2>\n      <div>\n        <ul>\n          <li>Fever or chills</li>\n          <li>Cough</li>\n          <li>Shortness of breath or difficulty breathing</li>\n          <li>Fatigue</li>\n          <li>Muscle or body aches</li>\n          <li>Headache</li>\n          <li>New loss of taste or smell</li>\n          <li>Sore throat</li>\n          <li>Congestion or runny nose</li>\n          <li>Nausea or vomiting</li>\n          <li>Diarrhea</li>\n        </ul>\n      </div>\n      <h2 className=\"h2-title\">\n        <strong>Emergency Symptoms</strong>\n      </h2>\n      <div>\n        <ul>\n          <li>Trouble breathing</li>\n          <li>Persistent pain or pressure in the chest</li>\n          <li>New confusion</li>\n          <li>Inability to wake or stay awake</li>\n          <li>Bluish lips or face</li>\n        </ul>\n      </div>\n    </div>\n  </React.Fragment>\n);\n","import React from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { About } from \"./about\";\nconst Styles = styled.div`\n  .navbar {\n    background-color: #222;\n  }\n  a,\n  .navbar-nav,\n  .navbar-light .nav-link {\n    color: #9fffcb;\n    &:hover {\n      color: white;\n    }\n  }\n  .navbar-brand {\n    font-size: 1.4em;\n    color: #9fffcb;\n    &:hover {\n      color: white;\n    }\n  }\n  .form-center {\n    position: absolute !important;\n    left: 25%;\n    right: 25%;\n  }\n`;\nexport const NavigationBar = () => (\n  <Router>\n    <Styles>\n      <Navbar expand=\"lg\">\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <Nav.Item>\n              <Nav.Link href=\"/\">Home</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href=\"/about\">General Info</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href=\"/tracker\">Tracker</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href=\"/tips\">Tips and Tricks</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </Styles>\n    <Switch>\n      <Route path=\"/about\">\n        <About />\n      </Route>\n      {/* <Route path=\"/topics\">\n        <Topics />\n      </Route>\n      <Route path=\"/\">\n        <Home />\n      </Route> */}\n    </Switch>\n  </Router>\n);\n","import React from \"react\";\n\nimport \"./App.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport { HashRouter } from \"react-router-dom\";\nimport { NavigationBar } from \"./components/navbar\";\nimport logo from \"./assets/images/covid.png\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {/* <p>COVID-19 Relief</p>\n                  <a\n                    className=\"App-link\"\n                    href=\"https://www.coronavirus.in.gov\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Official Indiana COVID-19 website\n                  </a> */}\n      </header>\n      <React.Fragment>\n        <HashRouter>\n          <NavigationBar />\n        </HashRouter>\n      </React.Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}